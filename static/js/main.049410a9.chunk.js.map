{"version":3,"sources":["actions/todos.js","actions/types.js","components/EditTodo.js","containers/EditComponentContainer.js","components/Todo.js","components/TodoList.js","containers/TodoContainer.js","components/NewTodoForm.js","containers/NewTodoFormContainer.js","App.js","serviceWorker.js","reducers/todoReducer.js","reducers/rootReducer.js","index.js"],"names":["todoId","editTodo","id","type","payload","edit","EditTodo","props","handleChange","e","setState","target","name","value","handleSubmit","preventDefault","updatedTodo","title","state","description","updateTodo","bind","this","console","log","Fragment","className","htmlFor","placeholder","onChange","onClick","Component","connect","ownProps","todo","todoReducer","todos","Todo","removeTodo","TodoList","ids","todoList","Object","keys","map","toggleEdit","EditComponentContainer","key","allIds","dispatch","NewTodoForm","addTodo","onSubmit","for","text","App","TodoContainer","NewTodoFormContainer","Boolean","window","location","hostname","match","INITIAL_STATE","data","combineReducers","action","stateCopy","removedState","filter","reduce","obj","newState","hasOwnProperty","store","createStore","rootReducer","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mfAEIA,EAAS,EAuBAC,EAAW,SAACC,GACvB,MAAO,CACLC,KCzBqB,YD0BrBC,QAAS,CACPF,GAAIA,EACJG,MAAM,K,sDE0CGC,E,YApEb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KASRC,aAAe,SAACC,GACd,EAAKC,SAAL,eACGD,EAAEE,OAAOC,KAAOH,EAAEE,OAAOE,SAZX,EAgBnBC,aAAe,SAACL,GACdA,EAAEM,iBACF,IAAIC,EAAc,CAAEd,GAAI,EAAKK,MAAMP,OAAQiB,MAAO,EAAKC,MAAMD,MAAOE,YAAa,EAAKD,MAAMC,aAC5F,EAAKZ,MAAMa,WAAWJ,GACtB,EAAKN,SAAS,CACZO,MAAO,GACPE,YAAa,MApBf,EAAKD,MAAQ,CACXD,MAAO,GACPE,YAAa,IAEf,EAAKX,aAAe,EAAKA,aAAaa,KAAlB,gBACpB,EAAKP,aAAe,EAAKA,aAAaO,KAAlB,gBAPH,E,sEA0BT,IAAD,EAEwBC,KAAKf,MAA5BU,EAFD,EAECA,MAAOE,EAFR,EAEQA,YAGf,OADAI,QAAQC,IAAIF,KAAKJ,OAEf,kBAAC,IAAMO,SAAP,KACE,wBAAIC,UAAU,gBACZ,8BACE,yBAAKA,UAAU,cACb,2BAAOC,QAAQ,cAAf,SAEF,2BACMzB,GAAG,aACHU,KAAK,QACLC,MAAOI,EACPW,YAAY,iBACZC,SAAUP,KAAKd,iBAIrB,yBAAKkB,UAAU,cACb,2BAAOC,QAAQ,oBAAf,eAEF,2BACMzB,GAAG,mBACHU,KAAK,cACLC,MAAOM,EACPS,YAAY,uBACZC,SAAUP,KAAKd,iBAIrB,4BAAQkB,UAAU,kBAAkBI,QAASR,KAAKR,cAAlD,WAEF,4BAAQgB,QAAS,kBAAMP,QAAQC,IAAI,YAAYE,UAAU,qBAAzD,gB,GA/DaK,aCYRC,eARS,SAACd,EAAOe,GAC9B,IAAI/B,EAAK+B,EAASjC,OAClB,MAAO,CACLkC,KAAMhB,EAAMiB,YAAYC,MAAMlC,MAOhC,CAAED,WAAUmB,WHmBY,SAAC,GACzB,MAAO,CACLjB,KClCuB,cDmCvBC,QAAS,CACPF,GAJoD,EAA7BA,GAKvBe,MALoD,EAAzBA,MAM3BE,YANoD,EAAlBA,gBGrBzBa,CAGX1B,GCOW+B,MAtBf,YAAuD,IAAvCH,EAAsC,EAAtCA,KAAMlC,EAAgC,EAAhCA,OAAQsC,EAAwB,EAAxBA,WAAYrC,EAAY,EAAZA,SAWxC,OACE,wBAAIyB,UAAU,QACZ,4BAAKQ,EAAKjB,OACV,2BAAIiB,EAAKf,aACT,4BAAQO,UAAU,iBAAiBI,QAblB,SAACrB,GACpB6B,EAAWtC,KAYT,eACA,4BAAQ0B,UAAU,kBAAkBI,QAVrB,SAACrB,GAClBR,EAASD,KASP,eC8BSuC,MAxCf,YAAyD,IAArCH,EAAoC,EAApCA,MAAYE,GAAwB,EAA7BE,IAA6B,EAAxBF,YAAYrC,EAAY,EAAZA,SAMpCwC,EAAWC,OAAOC,KAAKP,GAAOQ,KAAI,SAAA1C,GACtC,OAAO,eAAKkC,EAAMlC,GAAlB,CAAuBA,GAAIA,OAGvB2C,EAAa,SAAC7C,GAElBC,EAASD,IAKX,OAFAuB,QAAQC,IAAIiB,GAGV,kBAAC,IAAMhB,SAAP,KACE,yBAAKC,UAAU,aACb,4BACGe,EAASG,KAAI,SAACV,EAAMhC,GACnB,OAAsB,IAAdgC,EAAK7B,KACb,kBAACyC,EAAD,CACE9C,OAAQkC,EAAKhC,GACb6C,IAAK7C,IACP,kBAAC,EAAD,CACEgC,KAAMA,EACNa,IAAK7C,EACLF,OAAQkC,EAAKhC,GACboC,WAAYA,EACZrC,SAAU4C,WCfTb,eAdS,SAACd,EAAOe,GAC9B,MAAO,CACLG,MAAM,eAAMlB,EAAMiB,YAAYC,OAC9BI,IAAI,YAAKtB,EAAMiB,YAAYa,YAIJ,SAACC,EAAUhB,GACpC,MAAO,CACLK,WAAY,SAACtC,GAAD,OAAYiD,ENFnB,CACL9C,KCjBuB,cDkBvBC,QAAS,CACPF,GMD0CF,MAC5CC,SAAU,SAACD,GAAD,OAAYiD,EAAShD,EAASD,QAI7BgC,CAGbO,GCgCaW,E,YAvDb,WAAY3C,GAAQ,IAAD,8BACjB,4CAAMA,KASRO,aAAe,SAACL,GACdA,EAAEM,iBACF,EAAKR,MAAM4C,QAAQ,EAAKjC,OACxB,EAAKR,SAAS,CACZO,MAAO,GACPE,YAAa,MAfE,EAoBnBX,aAAe,SAACC,GACd,EAAKC,SAAL,eACGD,EAAEE,OAAOC,KAAOH,EAAEE,OAAOE,SApB5B,EAAKK,MAAQ,CACXD,MAAO,GACPE,YAAa,IAEf,EAAKL,aAAe,EAAKA,aAAaO,KAAlB,gBANH,E,sEA2BT,IAAD,OACP,OACE,0BAAM+B,SAAU9B,KAAKR,cACnB,yBAAKY,UAAU,cACb,2BAAO2B,IAAI,QAAX,cACA,2BACElD,KAAK,OACLuB,UAAU,eACVxB,GAAG,QACH0B,YAAY,+BACZhB,KAAK,QACLC,MAAOS,KAAKJ,MAAMD,MAClBY,SAAU,SAACpB,GAAD,OAAO,EAAKD,aAAaC,MACrC,2BACEN,KAAK,OACLuB,UAAU,eACVxB,GAAG,cACH0B,YAAY,qCACZhB,KAAK,cACLC,MAAOS,KAAKJ,MAAMC,YAClBU,SAAU,SAACpB,GAAD,OAAO,EAAKD,aAAaC,OAEvC,4BAAQiB,UAAU,mBAAlB,iB,GAnDkBK,aCWXC,cACb,KACA,CAAEmB,QRVmB,SAACG,GAEtB,MAAO,CACLnD,KCRoB,WDSpBC,QAAS,CACPkD,KAAMA,EACNpD,KALJF,MQOagC,CAGbkB,G,MCGaK,MAXf,WACE,OACE,kBAAC,IAAM9B,SAAP,KACE,yBAAKC,UAAU,aACb,kBAAC8B,EAAD,MACA,kBAACC,EAAD,SCDYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,mBCdAC,EAAgB,CACpB3B,MAAM,eAAM4B,EAAK5B,OACjBY,OAAO,YAAKgB,EAAKhB,SCDJiB,cAAgB,CAC7B9B,YDIyB,WAAoC,IAAnCjB,EAAkC,uDAA1B6C,EAAeG,EAAW,uCACxDC,EAAS,eAAQjD,GAErB,OAAQgD,EAAO/D,MACb,IVdoB,WUelB,IAAID,EAAKgE,EAAO9D,QAAQF,GACxB,MAAO,CACLkC,MAAM,eAAM+B,EAAU/B,MAAjB,eAAyBlC,EAAKgE,EAAO9D,QAAQkD,OAClDN,OAAO,GAAD,mBAAMmB,EAAUnB,QAAhB,CAAwB9C,KAGlC,IVpBuB,cUqBjBA,EAAKgE,EAAO9D,QAAQF,GAAxB,IACMkE,EAAe1B,OAAOC,KAAKwB,EAAU/B,OACxCiC,QAAO,SAAAtB,GAAG,OAAIA,IAAQ7C,KACtBoE,QAAO,SAACC,EAAKxB,GACZ,OAAO,eACFwB,EADL,eAEGxB,EAAMoB,EAAU/B,MAAMW,OAExB,IAEL,MAAO,CACLX,MAAM,eAAMgC,GACZpB,OAAO,YAAKmB,EAAUnB,OAAOqB,QAAO,SAAArE,GAAM,OAAIA,IAAWE,OAG7D,IVnCqB,YUoCnB,IAAIsE,EAAQ,eAAQL,GAChBjE,EAAKgE,EAAO9D,QAAQF,GACxB,IAAK,IAAI6C,KAAOyB,EAASpC,MAClBoC,EAASpC,MAAMW,GAAK0B,eAAe,UACtCD,EAASpC,MAAMW,GAAK1C,MAAO,GAG/B,IAAK,IAAI0C,KAAOyB,EAASpC,MACnBW,IAAQmB,EAAO9D,QAAQF,KACzBsE,EAASpC,MAAMW,GAAK1C,MAAQmE,EAASpC,MAAMlC,GAAIG,MAGnD,MAAO,CACL+B,MAAM,eAAMoC,EAASpC,OACrBY,OAAO,YAAKwB,EAASxB,SAIzB,IVrDuB,cUsDrB,IAAK,IAAID,KAAOoB,EAAU/B,MACpBW,IAAQmB,EAAO9D,QAAQF,KACzBiE,EAAU/B,MAAMW,GAAK9B,MAAQiD,EAAO9D,QAAQa,MAC5CkD,EAAU/B,MAAMW,GAAK5B,YAAc+C,EAAO9D,QAAQe,YAClDgD,EAAU/B,MAAMW,GAAK1C,MAAO,GAGhC,MAAO,CACL+B,MAAM,eAAM+B,EAAU/B,OACtBY,OAAO,YAAKmB,EAAUnB,SAG1B,QACE,OAAO,eAAKmB,OE3DZO,EAAQC,YACZC,EACAjB,OAAOkB,8BAAgClB,OAAOkB,gCAIhDC,IAASC,OACP,kBAAC,IAAD,CAAUL,MAAOA,GACf,kBAAC,EAAD,OAEFM,SAASC,eAAe,SH8GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.049410a9.chunk.js","sourcesContent":["import { ADD_TODO, REMOVE_TODO, EDIT_TODO, UPDATE_TODO } from './types';\n\nlet todoId = 3;\n\n/* Action to dispatch and remove a todo from our store */\nexport const addTodo = (text) => {\n  todoId++;\n  return {\n    type: ADD_TODO,\n    payload: {\n      text: text,\n      id: todoId\n    }\n  }\n}\n\nexport const removeTodo = (id) => {\n  return {\n    type: REMOVE_TODO,\n    payload: {\n      id: id\n    }\n  }\n}\n\nexport const editTodo = (id) => {\n  return {\n    type: EDIT_TODO,\n    payload: {\n      id: id,\n      edit: true,\n    }\n  }\n}\n\nexport const updateTodo = ({ id, title, description }) => {\n  return {\n    type: UPDATE_TODO,\n    payload: {\n      id: id,\n      title: title,\n      description: description\n    }\n  }\n}","export const ADD_TODO = \"ADD_TODO\";\nexport const REMOVE_TODO = \"REMOVE_TODO\";\nexport const EDIT_TODO = \"EDIT_TODO\";\nexport const UPDATE_TODO = \"UPDATE_TODO\";","import React, { Component } from \"react\";\n\nclass EditTodo extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      title: \"\",\n      description: \"\" \n    }\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange = (e) => {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    let updatedTodo = { id: this.props.todoId, title: this.state.title, description: this.state.description };\n    this.props.updateTodo(updatedTodo);\n    this.setState({\n      title: \"\",\n      description: \"\"\n    });\n  }\n\n  render() {\n\n    const { title, description } = this.props;\n\n    console.log(this.state);\n    return (\n      <React.Fragment>\n        <li className=\"card mx-auto\">\n          <form>\n            <div className=\"form-group\">\n              <label htmlFor=\"edit-title\">\n                Title:\n            <input\n                  id=\"edit-title\"\n                  name=\"title\"\n                  value={title}\n                  placeholder=\"Add a title...\"\n                  onChange={this.handleChange}\n                />\n              </label>\n            </div>\n            <div className=\"form-group\">\n              <label htmlFor=\"edit-description\">\n                Description:\n            <input\n                  id=\"edit-description\"\n                  name=\"description\"\n                  value={description}\n                  placeholder=\"Add a description...\"\n                  onChange={this.handleChange}\n                />\n              </label>\n            </div>\n            <button className=\"btn btn-primary\" onClick={this.handleSubmit}>Update</button>\n          </form>\n          <button onClick={() => console.log('clicked')} className=\"btn btn-secondary\">Cancel</button>\n        </li>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default EditTodo;","import { connect } from 'react-redux';\n\nimport { editTodo, updateTodo } from '../actions/todos';\n\nimport EditTodo from '../components/EditTodo';\n\nconst mapStateToProps = (state, ownProps) => {\n  let id = ownProps.todoId;\n  return {\n    todo: state.todoReducer.todos[id]\n  }\n}\n\n\nexport default connect(\n  mapStateToProps,\n  { editTodo, updateTodo }\n  )(EditTodo)","import React, { useState, useEffect } from 'react';\n\nfunction Todo({ todo, todoId, removeTodo, editTodo }) {\n\n  const handleDelete = (e) => {\n    removeTodo(todoId);\n  }\n\n  const handleEdit = (e) => {\n    editTodo(todoId)\n  }\n\n\n  return (\n    <li className=\"card\">\n      <h1>{todo.title}</h1>\n      <p>{todo.description}</p>\n      <button className=\"btn btn-danger\" onClick={handleDelete}>Remove Todo</button>\n      <button className=\"btn btn-primary\" onClick={handleEdit}>Edit Todo</button>\n    </li>\n\n  )\n}\n\nexport default Todo;","import React, { useState, useEffect } from 'react';\n\nimport EditComponentContainer from '../containers/EditComponentContainer';\n\n// Component Imports\nimport Todo from './Todo';\n\n\nfunction TodoList({ todos, ids, removeTodo, editTodo }) {\n\n  /*\n    Data in our store is normalized with id as key, todos as values.\n    This code below is to extract the ID's from the store and make turn them into individual todos\n    */\n  const todoList = Object.keys(todos).map(id => {\n    return { ...todos[id], id: id}\n  });\n\n  const toggleEdit = (todoId) => {\n    /* This function toggles the edit for the selected todo */\n    editTodo(todoId);\n    // return todoList.map(todo => todo.id === todoId ? { ...todo, edit: !todo.edit } : todo)\n  }\n  console.log(todoList);\n\n  return (\n    <React.Fragment>\n      <div className=\"container\">\n        <ol>\n          {todoList.map((todo, id) => {\n            return (todo.edit === true ? \n            <EditComponentContainer \n              todoId={todo.id} \n              key={id} /> : \n            <Todo \n              todo={todo} \n              key={id} \n              todoId={todo.id} \n              removeTodo={removeTodo} \n              editTodo={toggleEdit} />)\n          })}\n        </ol>\n      </div>\n    </React.Fragment>\n  )\n}\n\n\nexport default TodoList;","import { connect } from 'react-redux';\nimport TodoList from '../components/TodoList';\n\nimport { removeTodo, editTodo } from '../actions/todos';\n\nconst getIds = (todos) => {\n  console.log('todo')\n}\n\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    todos: { ...state.todoReducer.todos },\n    ids: [...state.todoReducer.allIds]\n  }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n    removeTodo: (todoId) => dispatch(removeTodo(todoId)),\n    editTodo: (todoId) => dispatch(editTodo(todoId))\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(TodoList);","import React, { Component } from \"react\";\n\nclass NewTodoForm extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      title: \"\",\n      description: \"\"\n    }\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    this.props.addTodo(this.state)\n    this.setState({\n      title: \"\",\n      description: \"\"\n    });\n  }\n\n\n  handleChange = (e) => {\n    this.setState({\n      [e.target.name]: e.target.value\n    })\n  }\n\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <div className='form-group'>\n          <label for=\"todo\">Add todo: </label>\n          <input\n            type=\"text\"\n            className=\"form-control\"\n            id=\"title\"\n            placeholder=\"Add a title for your todo...\"\n            name=\"title\"\n            value={this.state.title}\n            onChange={(e) => this.handleChange(e)} />\n          <input\n            type=\"text\"\n            className=\"form-control\"\n            id=\"description\"\n            placeholder=\"Add a description for your todo...\"\n            name=\"description\"\n            value={this.state.description}\n            onChange={(e) => this.handleChange(e)} />\n        </div>\n        <button className=\"btn btn-primary\">Add todo</button>\n      </form>\n    );\n  }\n}\n\nexport default NewTodoForm;","import { connect } from 'react-redux';\n\nimport NewTodoForm from '../components/NewTodoForm';\n\nimport { addTodo } from '../actions/todos';\n\nexport const mapStateToProps = (state, ownProps) => {\n  return {\n    todos: state.todoReducer.todos,\n    allIds: [...state.todoReducer.allIds]\n  }\n}\n\nexport default connect(\n  null,\n  { addTodo }\n)(NewTodoForm);","import React, { useState, useEffect } from 'react';\nimport TodoContainer from './containers/TodoContainer';\n\n// import NewTodoForm from './components/NewTodoForm';\nimport NewTodoFormContainer from './containers/NewTodoFormContainer';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <div className=\"container\">\n        <TodoContainer />\n        <NewTodoFormContainer />\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { ADD_TODO, REMOVE_TODO, EDIT_TODO, UPDATE_TODO } from '../actions/types';\n\nimport data from '../data.json';\n\nconst INITIAL_STATE = {\n  todos: { ...data.todos },\n  allIds: [...data.allIds]\n}\n\n\nexport const todoReducer = (state = INITIAL_STATE, action) => {\n  let stateCopy = { ...state };\n  \n  switch (action.type) {\n    case ADD_TODO:\n      var id = action.payload.id;\n      return {\n        todos: { ...stateCopy.todos, [id]: action.payload.text },\n        allIds: [...stateCopy.allIds, id]\n      }\n\n    case REMOVE_TODO:\n      var id = action.payload.id\n      const removedState = Object.keys(stateCopy.todos)\n        .filter(key => key !== id)\n        .reduce((obj, key) => {\n          return {\n            ...obj,\n            [key]: stateCopy.todos[key]\n          }\n        }, {})\n\n      return {\n        todos: { ...removedState },\n        allIds: [...stateCopy.allIds.filter(todoId => todoId !== id)]\n      }\n\n    case EDIT_TODO:\n      let newState = { ...stateCopy }\n      var id = action.payload.id;\n      for (let key in newState.todos) {\n        if (!newState.todos[key].hasOwnProperty('edit')) {\n          newState.todos[key].edit = false\n        }\n      }\n      for (let key in newState.todos) {\n        if (key === action.payload.id) {\n          newState.todos[key].edit = !newState.todos[id].edit\n        }\n      }\n      return {\n        todos: { ...newState.todos },\n        allIds: [...newState.allIds]\n      }\n\n\n    case UPDATE_TODO:\n      for (let key in stateCopy.todos) {\n        if (key === action.payload.id) {\n          stateCopy.todos[key].title = action.payload.title;\n          stateCopy.todos[key].description = action.payload.description;\n          stateCopy.todos[key].edit = false;\n        } \n      }\n      return {\n        todos: { ...stateCopy.todos },\n        allIds: [...stateCopy.allIds]\n      }\n\n    default:\n      return { ...stateCopy }\n  }\n}","import { combineReducers } from 'redux';\n\nimport { todoReducer } from './todoReducer';\n\n\nexport default combineReducers({\n  todoReducer\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\n\nimport rootReducer from './reducers/rootReducer'\n\nconst store = createStore(\n  rootReducer,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(),\n)\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}